# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  username: String
  email: String
  password: PasswordState
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  username: String
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  username: StringFilter
  email: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input UserOrderByInput {
  id: OrderDirection
  username: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  username: String
  email: String
  password: String
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  username: String
  email: String
  password: String
}

type FormSubmission {
  id: ID!
  email: String
}

input FormSubmissionWhereUniqueInput {
  id: ID
  email: String
}

input FormSubmissionWhereInput {
  AND: [FormSubmissionWhereInput!]
  OR: [FormSubmissionWhereInput!]
  NOT: [FormSubmissionWhereInput!]
  id: IDFilter
  email: StringFilter
}

input FormSubmissionOrderByInput {
  id: OrderDirection
  email: OrderDirection
}

input FormSubmissionUpdateInput {
  email: String
}

input FormSubmissionUpdateArgs {
  where: FormSubmissionWhereUniqueInput!
  data: FormSubmissionUpdateInput!
}

input FormSubmissionCreateInput {
  email: String
}

type Project {
  id: ID!
  userid: User
  name: String
  trackItems(
    where: TrackItemWhereInput! = {}
    orderBy: [TrackItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [TrackItem!]
  trackItemsCount(where: TrackItemWhereInput! = {}): Int
  track: JSON
}

input ProjectWhereUniqueInput {
  id: ID
}

input ProjectWhereInput {
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
  id: IDFilter
  userid: UserWhereInput
  name: StringFilter
  trackItems: TrackItemManyRelationFilter
}

input TrackItemManyRelationFilter {
  every: TrackItemWhereInput
  some: TrackItemWhereInput
  none: TrackItemWhereInput
}

input ProjectOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input ProjectUpdateInput {
  userid: UserRelateToOneForUpdateInput
  name: String
  trackItems: TrackItemRelateToManyForUpdateInput
  track: JSON
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input TrackItemRelateToManyForUpdateInput {
  disconnect: [TrackItemWhereUniqueInput!]
  set: [TrackItemWhereUniqueInput!]
  create: [TrackItemCreateInput!]
  connect: [TrackItemWhereUniqueInput!]
}

input ProjectUpdateArgs {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateInput!
}

input ProjectCreateInput {
  userid: UserRelateToOneForCreateInput
  name: String
  trackItems: TrackItemRelateToManyForCreateInput
  track: JSON
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input TrackItemRelateToManyForCreateInput {
  create: [TrackItemCreateInput!]
  connect: [TrackItemWhereUniqueInput!]
}

type Export {
  id: ID!
  timestamp: DateTime
  status: String
  error: String
  project: Project
  sizes(
    where: ExportSizeWhereInput! = {}
    orderBy: [ExportSizeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ExportSize!]
  sizesCount(where: ExportSizeWhereInput! = {}): Int
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input ExportWhereUniqueInput {
  id: ID
}

input ExportWhereInput {
  AND: [ExportWhereInput!]
  OR: [ExportWhereInput!]
  NOT: [ExportWhereInput!]
  id: IDFilter
  timestamp: DateTimeNullableFilter
  status: StringNullableFilter
  error: StringFilter
  project: ProjectWhereInput
  sizes: ExportSizeManyRelationFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input ExportSizeManyRelationFilter {
  every: ExportSizeWhereInput
  some: ExportSizeWhereInput
  none: ExportSizeWhereInput
}

input ExportOrderByInput {
  id: OrderDirection
  timestamp: OrderDirection
  status: OrderDirection
  error: OrderDirection
}

input ExportUpdateInput {
  timestamp: DateTime
  status: String
  error: String
  project: ProjectRelateToOneForUpdateInput
  sizes: ExportSizeRelateToManyForUpdateInput
}

input ProjectRelateToOneForUpdateInput {
  create: ProjectCreateInput
  connect: ProjectWhereUniqueInput
  disconnect: Boolean
}

input ExportSizeRelateToManyForUpdateInput {
  disconnect: [ExportSizeWhereUniqueInput!]
  set: [ExportSizeWhereUniqueInput!]
  create: [ExportSizeCreateInput!]
  connect: [ExportSizeWhereUniqueInput!]
}

input ExportUpdateArgs {
  where: ExportWhereUniqueInput!
  data: ExportUpdateInput!
}

input ExportCreateInput {
  timestamp: DateTime
  status: String
  error: String
  project: ProjectRelateToOneForCreateInput
  sizes: ExportSizeRelateToManyForCreateInput
}

input ProjectRelateToOneForCreateInput {
  create: ProjectCreateInput
  connect: ProjectWhereUniqueInput
}

input ExportSizeRelateToManyForCreateInput {
  create: [ExportSizeCreateInput!]
  connect: [ExportSizeWhereUniqueInput!]
}

type ExportSize {
  id: ID!
  name: String
  width: Int
  height: Int
  framerate: Int
}

input ExportSizeWhereUniqueInput {
  id: ID
}

input ExportSizeWhereInput {
  AND: [ExportSizeWhereInput!]
  OR: [ExportSizeWhereInput!]
  NOT: [ExportSizeWhereInput!]
  id: IDFilter
  name: StringFilter
  width: IntNullableFilter
  height: IntNullableFilter
  framerate: IntNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input ExportSizeOrderByInput {
  id: OrderDirection
  name: OrderDirection
  width: OrderDirection
  height: OrderDirection
  framerate: OrderDirection
}

input ExportSizeUpdateInput {
  name: String
  width: Int
  height: Int
  framerate: Int
}

input ExportSizeUpdateArgs {
  where: ExportSizeWhereUniqueInput!
  data: ExportSizeUpdateInput!
}

input ExportSizeCreateInput {
  name: String
  width: Int
  height: Int
  framerate: Int
}

type TrackItem {
  id: ID!
  name: String
  project: Project
  duration: Int
  file: File
  data: JSON
  type: String
}

input TrackItemWhereUniqueInput {
  id: ID
}

input TrackItemWhereInput {
  AND: [TrackItemWhereInput!]
  OR: [TrackItemWhereInput!]
  NOT: [TrackItemWhereInput!]
  id: IDFilter
  name: StringFilter
  project: ProjectWhereInput
  duration: IntNullableFilter
  file: FileWhereInput
  type: StringFilter
}

input TrackItemOrderByInput {
  id: OrderDirection
  name: OrderDirection
  duration: OrderDirection
  type: OrderDirection
}

input TrackItemUpdateInput {
  name: String
  project: ProjectRelateToOneForUpdateInput
  duration: Int
  file: FileRelateToOneForUpdateInput
  data: JSON
  type: String
}

input FileRelateToOneForUpdateInput {
  create: FileCreateInput
  connect: FileWhereUniqueInput
  disconnect: Boolean
}

input TrackItemUpdateArgs {
  where: TrackItemWhereUniqueInput!
  data: TrackItemUpdateInput!
}

input TrackItemCreateInput {
  name: String
  project: ProjectRelateToOneForCreateInput
  duration: Int
  file: FileRelateToOneForCreateInput
  data: JSON
  type: String
}

input FileRelateToOneForCreateInput {
  create: FileCreateInput
  connect: FileWhereUniqueInput
}

type File {
  id: ID!
  userid: User
  file: FileFieldOutput
  export: Export
  type: String
}

interface FileFieldOutput {
  filename: String!
  filesize: Int!
  ref: String!
  url: String!
}

input FileWhereUniqueInput {
  id: ID
}

type LocalFileFieldOutput implements FileFieldOutput {
  filename: String!
  filesize: Int!
  ref: String!
  url: String!
}

type CloudFileFieldOutput implements FileFieldOutput {
  filename: String!
  filesize: Int!
  ref: String!
  url: String!
}

input FileWhereInput {
  AND: [FileWhereInput!]
  OR: [FileWhereInput!]
  NOT: [FileWhereInput!]
  id: IDFilter
  userid: UserWhereInput
  export: ExportWhereInput
}

input FileOrderByInput {
  id: OrderDirection
}

input FileUpdateInput {
  userid: UserRelateToOneForUpdateInput
  file: FileFieldInput
  export: ExportRelateToOneForUpdateInput
}

input FileFieldInput {
  upload: Upload
  ref: String
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input ExportRelateToOneForUpdateInput {
  create: ExportCreateInput
  connect: ExportWhereUniqueInput
  disconnect: Boolean
}

input FileUpdateArgs {
  where: FileWhereUniqueInput!
  data: FileUpdateInput!
}

input FileCreateInput {
  userid: UserRelateToOneForCreateInput
  file: FileFieldInput
  export: ExportRelateToOneForCreateInput
}

input ExportRelateToOneForCreateInput {
  create: ExportCreateInput
  connect: ExportWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createFormSubmission(data: FormSubmissionCreateInput!): FormSubmission
  createFormSubmissions(data: [FormSubmissionCreateInput!]!): [FormSubmission]
  updateFormSubmission(
    where: FormSubmissionWhereUniqueInput!
    data: FormSubmissionUpdateInput!
  ): FormSubmission
  updateFormSubmissions(data: [FormSubmissionUpdateArgs!]!): [FormSubmission]
  deleteFormSubmission(where: FormSubmissionWhereUniqueInput!): FormSubmission
  deleteFormSubmissions(
    where: [FormSubmissionWhereUniqueInput!]!
  ): [FormSubmission]
  createProject(data: ProjectCreateInput!): Project
  createProjects(data: [ProjectCreateInput!]!): [Project]
  updateProject(
    where: ProjectWhereUniqueInput!
    data: ProjectUpdateInput!
  ): Project
  updateProjects(data: [ProjectUpdateArgs!]!): [Project]
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteProjects(where: [ProjectWhereUniqueInput!]!): [Project]
  createExport(data: ExportCreateInput!): Export
  createExports(data: [ExportCreateInput!]!): [Export]
  updateExport(where: ExportWhereUniqueInput!, data: ExportUpdateInput!): Export
  updateExports(data: [ExportUpdateArgs!]!): [Export]
  deleteExport(where: ExportWhereUniqueInput!): Export
  deleteExports(where: [ExportWhereUniqueInput!]!): [Export]
  createExportSize(data: ExportSizeCreateInput!): ExportSize
  createExportSizes(data: [ExportSizeCreateInput!]!): [ExportSize]
  updateExportSize(
    where: ExportSizeWhereUniqueInput!
    data: ExportSizeUpdateInput!
  ): ExportSize
  updateExportSizes(data: [ExportSizeUpdateArgs!]!): [ExportSize]
  deleteExportSize(where: ExportSizeWhereUniqueInput!): ExportSize
  deleteExportSizes(where: [ExportSizeWhereUniqueInput!]!): [ExportSize]
  createTrackItem(data: TrackItemCreateInput!): TrackItem
  createTrackItems(data: [TrackItemCreateInput!]!): [TrackItem]
  updateTrackItem(
    where: TrackItemWhereUniqueInput!
    data: TrackItemUpdateInput!
  ): TrackItem
  updateTrackItems(data: [TrackItemUpdateArgs!]!): [TrackItem]
  deleteTrackItem(where: TrackItemWhereUniqueInput!): TrackItem
  deleteTrackItems(where: [TrackItemWhereUniqueInput!]!): [TrackItem]
  createFile(data: FileCreateInput!): File
  createFiles(data: [FileCreateInput!]!): [File]
  updateFile(where: FileWhereUniqueInput!, data: FileUpdateInput!): File
  updateFiles(data: [FileUpdateArgs!]!): [File]
  deleteFile(where: FileWhereUniqueInput!): File
  deleteFiles(where: [FileWhereUniqueInput!]!): [File]
  endSession: Boolean!
  authenticateUserWithPassword(
    username: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  username: String
  email: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  formSubmissions(
    where: FormSubmissionWhereInput! = {}
    orderBy: [FormSubmissionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [FormSubmission!]
  formSubmission(where: FormSubmissionWhereUniqueInput!): FormSubmission
  formSubmissionsCount(where: FormSubmissionWhereInput! = {}): Int
  projects(
    where: ProjectWhereInput! = {}
    orderBy: [ProjectOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Project!]
  project(where: ProjectWhereUniqueInput!): Project
  projectsCount(where: ProjectWhereInput! = {}): Int
  exports(
    where: ExportWhereInput! = {}
    orderBy: [ExportOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Export!]
  export(where: ExportWhereUniqueInput!): Export
  exportsCount(where: ExportWhereInput! = {}): Int
  exportSizes(
    where: ExportSizeWhereInput! = {}
    orderBy: [ExportSizeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ExportSize!]
  exportSize(where: ExportSizeWhereUniqueInput!): ExportSize
  exportSizesCount(where: ExportSizeWhereInput! = {}): Int
  trackItems(
    where: TrackItemWhereInput! = {}
    orderBy: [TrackItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [TrackItem!]
  trackItem(where: TrackItemWhereUniqueInput!): TrackItem
  trackItemsCount(where: TrackItemWhereInput! = {}): Int
  files(
    where: FileWhereInput! = {}
    orderBy: [FileOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [File!]
  file(where: FileWhereUniqueInput!): File
  filesCount(where: FileWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
